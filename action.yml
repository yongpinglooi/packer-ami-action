name: "Packer EC2"
description: "AMI Builder"

inputs:
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true
  aws-region:
    description: "AWS AMI Region"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  build:
    description: "Packer build name"
    required: true
  instance-type:
    description: "AWS EC2 Instance Type"
    required: true
    default: "t3.micro"
  packer-directory:
    description: "Packer directory"
    required: false
  packer-version:
    description: "Packer version"
    required: false
    default: "1.7"
  subnet-id:
    description: "AWS Subnet ID. Export to environment variable `PKR_VAR_SUBNET_ID`"
    required: false
  template:
    description: "Packer template"
    required: true
    default: "."
  var-file:
    description: "Packer var file"
    required: false
  vpc-id:
    description: "AWS VPC ID. Export to environment variable `PKR_VAR_VPC_ID`"
    required: false

outputs:
  ami-id:
    description: "AMI ID"
    value: ${{ steps.set-ami-id.outputs.ami-id }}
  aws-region:
    description: "AWS AMI Region"
    value: ${{ steps.build-ami.outputs.aws-region }}

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: false

    - name: Setup Packer
      uses: hashicorp/setup-packer@v3.0.0
      with:
        version: ${{ inputs.packer-version }}

    - name: Run `packer init`
      id: init
      shell: bash
      env:
        TEMPLATE: ${{ inputs.template }}
      working-directory: ${{ inputs.packer-directory }}
      run: |
        echo "PACKER COMMAND: packer init $TEMPLATE"
        packer init $TEMPLATE

    - name: Run `packer validate`
      id: validate
      shell: bash
      env:
        PKR_VAR_instance_type: ${{ inputs.instance-type }}
        PKR_VAR_subnet_id: ${{ inputs.subnet-id }}
        PKR_VAR_vpc_id: ${{ inputs.vpc-id }}
        TEMPLATE: ${{ inputs.template }}
        VAR_FILE: ${{ inputs.var-file }}
      working-directory: ${{ inputs.packer-directory }}
      run: |
        echo "Validating Packer template..."
        echo "Subnet ID: $PKR_VAR_subnet_id"
        echo "VPC ID: $PKR_VAR_vpc_id"

        if [ -z "$VAR_FILE" ]; then
          packer validate \
            -var region=${{ inputs.aws-region }} \
            -only ${{ inputs.build }} \
            $TEMPLATE
        else
          packer validate \
            -var region=${{ inputs.aws-region }} \
            -var-file $VAR_FILE \
            -only ${{ inputs.build }} \
            $TEMPLATE
        fi

    - name: Run `packer build`
      id: build-ami
      shell: bash
      env:
        PKR_VAR_instance_type: ${{ inputs.instance-type }}
        PKR_VAR_subnet_id: ${{ inputs.subnet-id }}
        PKR_VAR_vpc_id: ${{ inputs.vpc-id }}
        TEMPLATE: ${{ inputs.template }}
        VAR_FILE: ${{ inputs.var-file }}
      working-directory: ${{ inputs.packer-directory }}
      run: |
        echo "Building AMI..."

        if [ -z "$VAR_FILE" ]; then
          packer build \
            -color=false \
            -machine-readable \
            -on-error=abort \
            -var region=${{ inputs.aws-region }} \
            -only ${{ inputs.build }} \
            $TEMPLATE
        else
          packer build \
            -color=false \
            -machine-readable \
            -on-error=abort \
            -var region=${{ inputs.aws-region }} \
            -var-file $VAR_FILE \
            -only ${{ inputs.build }} \
            $TEMPLATE
        fi

    - name: Set AMI ID Outputs
      id: set-ami-id
      shell: bash
      working-directory: ${{ inputs.packer-directory }}
      run: |
        if [ -f ./manifest.json ]; then
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          echo "AMI ID: $AMI_ID"
          echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT

          REGION=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f1)
          echo "AWS Region: $REGION"
          echo "aws-region=$REGION" >> $GITHUB_OUTPUT
        else
          echo "The Packer manifest does not exist."
        fi
